# DataMapper::Logger.new(STDOUT, :debug)

DataMapper.setup(:default, "sqlite3://#{Dir.pwd}/songdb.sqlite3")

class Song
  include DataMapper::Resource
  
  property :id,             Serial
  property :title,          String, :required => true
  property :song_key,       String, :default => "C"
  property :time_signature, String, :default => "4/4"
  property :created_on,     Date
  
  has n, :sections
  
  has n, :taggings
  has n, :tags, :through => :taggings
end

class Tag
  include DataMapper::Resource
  
  property :id,     Serial
  property :name,   String, :required => true
  
  has n, :taggings
  has n, :songs, :through => :taggings
end

class Tagging
  include DataMapper::Resource
  
  belongs_to :tag,    :key => true
  belongs_to :song,   :key => true
end

class Section
  include DataMapper::Resource
  
  property :id,         Serial
  property :type,       String, :default => "CHORUS"
  
  belongs_to :song
  
  has n, :chord_tables
  has n, :chord_progressions, :through => :chord_tables
end

class ChordProgression
  include DataMapper::Resource
  
  property :id,           Serial
  property :progression,  String, :required => true
  property :resolution,   Integer, :default => 1
  
  has n, :chord_tables
  has n, :sections, :through => :chord_tables
  
  @@valid_chords = %w[ i ii iii iv v vi vii I II III IV V VI VII ].map { |c| c.intern }
  
end

class ChordTable
  include DataMapper::Resource
  
  belongs_to :chord_progression,   :key => true
  belongs_to :section, :key => true
end

DataMapper.finalize

DataMapper.auto_upgrade!
# DataMapper.auto_migrate!

# basic_progression = ChordProgression.create(:progression => "[I,V,vi,IV]")
# basic_progression.save

# blessed_chorus = Section.create(:type => "Chorus", :chord_progressions => [ basic_progression ] )
# blessed_chorus.save

# blessed = Song.create(:title => "Blessed Be Your Name", :song_key => "A", :time_signature => "4/4", :sections => [ blessed_chorus ])
# blessed.save